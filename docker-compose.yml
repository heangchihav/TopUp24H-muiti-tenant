volumes:
  pgdata:
  frontend_build:


networks:
  app_network:
    driver: bridge
    name: app_network
services:
  db:
    image: postgres:15 # PostgreSQL version
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Loaded from root .env
      POSTGRES_DB: ${DB_NAME} # Loaded from root .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  expressjs:
    build:
      context: ./expressjs
    container_name: expressjs_service
    ports:
      - "5555:5555"
      - "3000:3000"
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis_service:6379
      NODE_ENV: development
    volumes:
      - ./expressjs/src:/app/src
      - ./expressjs/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      logstash:
        condition: service_started
      es01:
        condition: service_started
    networks:
      - app_network
  redis:
    image: redis:alpine
    container_name: redis_service
    ports:
      - "6379:6379"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared_tunnel
    restart: always
    command: tunnel --config /etc/cloudflared/config.yml run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    volumes:
      - ./cloudflared:/etc/cloudflared:ro
    depends_on:
      - nginx
    networks:
      - app_network
  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - expressjs
      - admin
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - frontend_build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
    networks:
      - app_network

  admin:
    build:
      context: ./frontend/admin
      dockerfile: Dockerfile
    container_name: frontend_service
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_build:/app/dist
    depends_on:
      - expressjs
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
